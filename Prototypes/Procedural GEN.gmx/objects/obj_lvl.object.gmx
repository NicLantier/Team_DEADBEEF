<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create level

//resize the room
room_width = (CELL_WIDTH/16) * 720;
room_height = (CELL_HEIGHT/16) * 720;

//set grid width and height
var width = room_width div CELL_WIDTH;      //div returns whole number
var height = room_height div CELL_HEIGHT;

//create grid
grid = ds_grid_create(width, height);

//fill the grid with void
ds_grid_set_region(grid, 0, 0, (width - 1), (height - 1), VOID);

//Random gen
randomize();

//create controller location variables (always center)
var cx = width div 2;
var cy = height div 2;

//create player
instance_create(cx * CELL_WIDTH + CELL_WIDTH/2, cy * CELL_HEIGHT+CELL_HEIGHT/2, obj_player);

//give the controller a random direction
var cdir = irandom(3);

//odds for variable changing direction
var odds = 1;

//creat level using 1000 steps
repeat (1000){
    //place floor tile at controller position
    grid[# cx, cy] = FLOOR;         //accessor
    
    //randomize direction of the controller
    if(irandom(odds) == odds){
        cdir = irandom(3);
    }
    //move controller every step to place floor somewhere else
    var xdir = lengthdir_x(1, (cdir * 90));     //multiplied by 90 to rpelicate circle angles
    var ydir = lengthdir_y(1, (cdir * 90));
    cx += xdir;
    cy += ydir;
    
    //constrain movement to inside the grid
    cx = clamp(cx, 1, (width - 2));   //subtract 2 for 1 pixel border around edge
    cy = clamp(cy, 1, (height - 2));
}

for(var yy = 1; yy &lt; height - 1; yy++){
    for(var xx = 1; xx &lt; width - 1; xx++){
        //surround floor tiles with walls
        if(grid[# xx, yy] == FLOOR){
            //check to the right
            if(grid[# xx + 1, yy] != FLOOR){
                grid[# xx + 1, yy] = WALL;
            }
            //check to the left
            if(grid[# xx - 1, yy] != FLOOR){
                grid[# xx - 1, yy] = WALL;
            }
            //check below
            if(grid[# xx, yy + 1] != FLOOR){
                grid[# xx, yy + 1] = WALL;
            }
            //check above
            if(grid[# xx, yy - 1] != FLOOR){
                grid[# xx, yy - 1] = WALL;
            }
        }
    }
}

//draw tiles
for(var yy = 0; yy &lt; height; yy++){
    for(var xx = 0; xx &lt; width; xx++){
        //draw floor
        if(grid[# xx, yy] == FLOOR){
            tile_add(bg_floor, 0, 0, CELL_WIDTH, CELL_HEIGHT, xx * CELL_WIDTH, yy * CELL_HEIGHT, 0);
        } 
        //draw walls
        /*else if(grid[# xx, yy] == WALL){
            tile_add(bg_wall, 0, 0, CELL_WIDTH, CELL_HEIGHT, xx * CELL_WIDTH, yy * CELL_HEIGHT, 0); 
        }*/      
    }
}

//get tile size
var tile_width = CELL_WIDTH/2;
var tile_height = CELL_HEIGHT/2;

//add tiles   ***ALL THE 2's ARE DUE TO 32x32 WALL TILES ON 64x64 FLOOR***
for(var yy = 0; yy &lt; height * 2; yy++){
    for(var xx = 0; xx &lt; width * 2; xx++){
        if(grid[# xx div 2, yy div 2] == FLOOR){
            //get tile's x and y
            var tile_x = xx * tile_width;
            var tile_y = yy * tile_height;
            
            var right = grid[# (xx + 1) div 2, yy div 2] != FLOOR; 
            var left = grid[# (xx - 1) div 2, yy div 2] != FLOOR;
            var top = grid[# xx div 2, (yy - 1) div 2] != FLOOR;
            var bottom = grid[# xx div 2, (yy + 1) div 2] != FLOOR;
            
            var top_right = grid[# (xx + 1) div 2, (yy - 1) div 2] != FLOOR;
            var top_left = grid[# (xx - 1) div 2, (yy - 1) div 2] != FLOOR;
            var bottom_right = grid[# (xx + 1) div 2, (yy + 1) div 2] != FLOOR;
            var bottom_left = grid[# (xx - 1) div 2, (yy + 1) div 2] != FLOOR;
            
            if(right){
                if(bottom){
                    tile_add(bg_walltiles, tile_width * 4, tile_height * 1, tile_width, tile_height, tile_x + tile_width, tile_y, -tile_y);
                } else if (top){
                    if(top_right){
                        tile_add(bg_walltiles, tile_width * 4, tile_height * 0, tile_width, tile_height, tile_x + tile_width, tile_y - tile_height, -tile_y);
                    } else {
                        tile_add(bg_walltiles, tile_width * 3, tile_height * 0, tile_width, tile_height, tile_x, tile_y - tile_height, -tile_y);
                    }
                    tile_add(bg_walltiles, tile_width * 0, tile_height * 1, tile_width, tile_height, tile_x + tile_width, tile_y, -tile_y);
                } else {
                    tile_add(bg_walltiles, tile_width * 0, tile_height * 1, tile_width, tile_height, tile_x + tile_width, tile_y, -tile_y);
                }
            }
            if(left){
                if(bottom){
                    tile_add(bg_walltiles, tile_width * 3, tile_height * 1, tile_width, tile_height, tile_x - tile_width, tile_y, -tile_y);
                } else if (top){
                    if(top_left){
                        tile_add(bg_walltiles, tile_width * 3, tile_height * 0, tile_width, tile_height, tile_x - tile_width, tile_y - tile_height, -tile_y);
                    } else {
                        tile_add(bg_walltiles, tile_width * 4, tile_height * 0, tile_width, tile_height, tile_x, tile_y - tile_height, -tile_y);
                    }
                    tile_add(bg_walltiles, tile_width * 2, tile_height * 1, tile_width, tile_height, tile_x - tile_width, tile_y, -tile_y);
                } else {
                    tile_add(bg_walltiles, tile_width * 2, tile_height * 1, tile_width, tile_height, tile_x - tile_width, tile_y, -tile_y);
                }
            }
            
            if(top){
                if(!top_right){
                    tile_add(bg_walltiles, tile_width * 2, tile_height * 2, tile_width, tile_height, tile_x, tile_y - tile_height, -tile_y);
                } else if(!top_left){
                    tile_add(bg_walltiles, tile_width * 0, tile_height * 2, tile_width, tile_height, tile_x, tile_y - tile_height, -tile_y);
                } else {
                    tile_add(bg_walltiles, tile_width * 1, tile_height * 2, tile_width, tile_height, tile_x, tile_y - tile_height, -tile_y);
                }
            }
            if(bottom){
                if(!bottom_right){
                    tile_add(bg_walltiles, tile_width * 2, tile_height * 0, tile_width, tile_height, tile_x, tile_y, -tile_y);
                } else if(!bottom_left){
                    tile_add(bg_walltiles, tile_width * 0, tile_height * 0, tile_width, tile_height, tile_x, tile_y, -tile_y);
                } else {
                    tile_add(bg_walltiles, tile_width * 1, tile_height * 0, tile_width, tile_height, tile_x, tile_y, -tile_y);
                }
            }
        }
    }
} 









</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="32">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///restart the room

room_restart();

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
